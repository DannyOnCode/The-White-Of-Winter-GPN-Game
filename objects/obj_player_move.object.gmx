<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_walk</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///All Declared Variable
// Developer : Shared

//Animation
image_speed = 0;

//Movement
Speed = 1;
friction = 0.2;


hSpeed = 1; //Horizontal Speed
vSpeed = 1; //Vertical Speed
hsp = 0;
vsp = 0;

//Jumps
jumps = 2;  // Jumps left
jumpsmax = 2;  // Maximum number of jumps
canJump = false;
jumped = false;

//Lantern
sticking = false; //Hanging on Lantern
dashing = false; //Dashing to Lantern
dashingOut = false; //Dashing away from Lantern
stuckon = false; // Checks for collision errors
stuckLantern = noone; //Declare of stuckLantern
dashingLantern = noone; //Currently selected Lantern


//Portal
canCreatePortal = true;







</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Transports player to next room
//Developer : Danny Chan
room_goto(rm_levelfour);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Audio If Hanging on Lantern
// Developer : Zhao Yi
if(sticking)
{
    audio_play_sound(sound6_LanternFireSound,0,true);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Checks for errors in collsion
// Developer : Danny Chan
stuckon = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Checks for errors in collsion
// Developer : Danny Chan
if(!stuckon)
{
    dashing = false;
    gravity = 0.75
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow portal to be created
// Developer : Danny Chan
canCreatePortal = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy portal
// Developer : Danny Chan
instance_destroy(obj_portal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Determines Jumping mechanic
// Developer : Danny Chan

key_jump = keyboard_check_pressed(ord("W")); // Set jump key

//Checks if player can jump
if(keyboard_check_pressed(ord("W")) &amp;&amp; jumps != 0)
{
    canJump = true
}
else
{ 
    canJump = false
}

//When no action is inputted, cannot jump, not dashing, and not sticking. Reset gravity
if(place_free(x,y+1) &amp;&amp; !canJump &amp;&amp; !dashing &amp;&amp; !sticking)
{   
    gravity = 0.75
    //Setting Max falling speed
    if(vspeed &gt;= 18) vspeed = 18
}else{
    //Reset Double Jump
    if(!place_free(x,y+1.5))
    {
        jumps = jumpsmax; 
    }
    //Jump
    if(jumps &gt; 0)
        {
            //If jump key is pressed
            if(key_jump){ 
                jumped = true;
                audio_play_sound(sound4_JumpSound,0,false);
                
                gravity = 0
                vspeed = -18 //Set Vertical Speed to go up
                jumps -= 1 //Reduce number of jumps left
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement (A and D Key)
//Developer : Danny Chan

//Declare Keys left and right
key_left = keyboard_check(ord("A"));
key_right = keyboard_check(ord("D"));

//Move Left
// If left key is pressed and not going into wall and is not dashing or sticking
if(key_left &amp;&amp; (place_free(x - Speed,y) &amp;&amp; !dashing &amp;&amp; !sticking))
{
    //Checks if max speed has been reached
    if(hspeed &lt; -6 &amp;&amp; !(hspeed &gt; -6)){
       hspeed = -6 //set to max speed
    }
    //Walk
    else{
        sprite_index = spr_player_walk; //Animation
        if(speed &lt; 3) image_speed = 0.2 //Walk slower if slow speed
        if(speed &lt; 6) image_speed = 0.4 //Walk faster if high speed
        hspeed -= Speed //Decreases horizontal speed of player
        image_xscale = -1 //Animation : Face left
    }
}


//Move Right
// If left key is pressed and not going into wall and is not dashing or sticking
if(key_right &amp;&amp; (place_free(x + Speed,y) &amp;&amp; !dashing &amp;&amp;!sticking))
{
    //Checks if max speed has been reached
    if(hspeed &gt; 6) {
        hspeed = 6 //set to max speed
    }
    else{
        sprite_index = spr_player_walk //Animation
        if(speed &lt; 3) image_speed = 0.2 //Walk slower if slow speed
        if(speed &lt; 6) image_speed = 0.4 //Walk faster if high speed
        hspeed += Speed //Increase horizontal speed of player
        image_xscale = 1 //Animation : Face left
    }
}

//Idle
if(speed = 0)
{
    //Animation
    image_speed = 0
    image_index = 3
}

if(keyboard_check(vk_anykey))
{
    global.dialogFinished = true; 
}

    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dashing To Lantern
//Developer : Shared

//Checks if player clicked on Lantern and is in range
if(mouse_check_button_pressed(mb_left) &amp;&amp; position_meeting(mouse_x,mouse_y,obj_lantern) &amp;&amp; (distance_to_point(mouse_x,mouse_y) &lt; (room_width/2))){
    dashingLantern = collision_circle(mouse_x, mouse_y, 35, obj_lantern, false, false); // Get selected Lantern Instance ID
    
    //Checks if Lantern is disabled
    if (dashingLantern &amp;&amp; dashingLantern.disable == false &amp;&amp; dashingLantern.rise == false)
    {
        //Checks between player and lantern if there is no solid
        if(collision_line(mouse_x, mouse_y, x, y, obj_solid, false, false) == noone){
            audio_play_sound(sound3_DashSound,0,false);
            
            dashing = true;
            gravity = 0; //Stops player from falling
            move_towards_point(mouse_x,mouse_y,distance_to_point(mouse_x,mouse_y)/8); //Dashing towards lantern at a relative speed
            alarm[2] = 20; //Checks if the player collided with wall
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sticking To Lantern
// Developer : Shared

stuckLantern = collision_circle(x, y, 35, obj_lantern, false, false) // Get currently colliding Lantern
// if current selected lantern is same as colliding lantern and is dashing
if((stuckLantern == dashingLantern) &amp;&amp; dashing){
    stuckLantern.image_index = 1; // Animation
    audio_play_sound(sound9_StickOnLantern,0,false);
    
    dashing = false;
    sticking = true;
    stuckon = true; //Confirms that player is hanging on Lantern | No collision error
    alarm[3] = 35; //Resets stuckon to false
    gravity = 0; //Stops player from falling
}

// Checks if currently hung on lantern is disabled
if (stuckLantern &amp;&amp; (stuckLantern.disable == true || stuckLantern.rise == true)) {
    audio_stop_sound(sound6_LanternFireSound);
    
    sticking = false;
    dashingOut = false;
    gravity = 0.75 //Re-enables falling
}

if(sticking){
    alarm[4] = 15; //Plays Lantern fire sound
    speed = 0; // Stops player movement upon collision
    dashingOut = true;
    
}

//Dashing out
if(mouse_check_button_pressed(mb_left) &amp;&amp; stuckLantern &amp;&amp; gravity == 0){
    stuckLantern.image_index = 0; //Animation
    audio_stop_sound(sound6_LanternFireSound);
    
    sticking = false;
    dashingOut = false;
    gravity = 0.75 //Re-enables falling
    move_towards_point(mouse_x,mouse_y,15); //Dash
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restriction
//Developer : Danny Chan

//Stops player from moving when crash into wall
if(!place_free(x+hspeed,y)){
    hspeed = 0;
}

//Stops player from falling into the floor
if(!place_free(x,y + vspeed)){
    vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Skills
//Developer : Danny Chan

//Portal Click
//Create portal if player right clicked and can create a portal
if(mouse_check_button_pressed(mb_right) &amp;&amp; canCreatePortal){
    canCreatePortal = false;
    instance_create(mouse_x,mouse_y,obj_portal); //Creates portal
    alarm[1] = 300; //Re-enable canCreatePortal to true
    alarm[0] = 300; //Destroy created portal
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Interaction with blackhole enemy
//Developer : Danny Chan

//Check if player is within range of the enemy and is not on lantern or dashing
if(distance_to_object(obj_blackhole_enemy) &lt; 240 &amp;&amp; withinRange &amp;&amp; !sticking &amp;&amp; !dashing)
{
    blackHoleInstance = collision_circle(x,y,340,obj_blackhole_enemy,false,false) //Find instance id of blackhole
    gravity = 0.2 //Distrot Gravity
    dirx = sign(blackHoleInstance.x - x); //determine the direction x of blackhole
    diry = sign(blackHoleInstance.y - y); //determine the direction y of blackhole
    hsp = dirx * 2.5;
    vsp = diry * 2.5;
    
    //Move towards blackhole
    x += hsp;
    y += vsp;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Checks if person enters secret room
//Developer : Danny Chan

//If player walk pass secretRoom Entrance
if(position_meeting(x,y,obj_secretRoom))
{
    instance_destroy(obj_rise_enemy);
    instance_destroy(obj_drift_enemy);
    instance_destroy(obj_spike_enemy);
    instance_destroy(obj_spikes);
    instance_destroy(obj_blackhole_enemy);
    instance_destroy(obj_portal);
    instance_destroy(obj_rising_fog);
    if(room == rm_levelthree)
    {
        instance_destroy(obj_text);
        instance_destroy(obj_textBox);
        scr_createDialogue(8);
        instance_destroy(obj_secretRoom);
        alarm[5] = 400;
    }   
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_spikes">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kills Player if touches
// Developer : Danny Chan
scr_stopSound();
room_restart();
global.startedAlreadyOne = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Checks if player landed on floor
vspeed = 0;

dashing = false;
sticking = false;

//Playing sound of land if player has jumped
if(jumped)
{
    audio_play_sound(sound5_Land,0,false);
    jumped = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_singleFog">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kills Player if touches
// Developer : Danny Chan
scr_stopSound();
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_rising_fog">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kills Player if touches
// Developer : Danny Chan
scr_stopSound();
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_rise_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kills Player if touches enemy
// Developer : Danny Chan
scr_stopSound();
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_endLine">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to next room when player reaches end
// Developer : Danny Chan

scr_stopSound();

//Checks if entering boss room
if(room == rm_levelfive)
{
    audio_stop_sound(sound0_BackgroundMusic);
}
room_goto_next();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_drift_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kills Player if touches enemy
// Developer : Danny Chan
scr_stopSound();
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_deathBlocks">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kills Player if touches
// Developer : Danny Chan
scr_stopSound();
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_blackhole_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kills Player if touches enemy
// Developer : Danny Chan
scr_stopSound();
room_restart();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Goes back to main menu
// Developer : Danny Chan

scr_stopSound();
audio_stop_sound(sound0_BackgroundMusic);
audio_stop_sound(sound2_BossMusic);
room_goto(rm_menu);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing of Lantern Dash Out Line
//Developer : Shared

draw_self()

//If player is on the Lantern
if(sticking)
{
    if(stuckLantern)
    {
        //If distance is more than dash out distance (estimate)
        if(point_distance(x,y,mouse_x,mouse_y) &gt; 96)
        {
            direction = point_direction(x,y,mouse_x,mouse_y)
            draw_line_width_colour(stuckLantern.x,stuckLantern.y,x + lengthdir_x(96, direction), y + lengthdir_y(96, direction),5,c_yellow,c_red);
            
        }
        else
        { 
            draw_line_width_colour(stuckLantern.x,stuckLantern.y,mouse_x, mouse_y,5,c_yellow,c_red);
        
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
